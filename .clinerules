# .clinerules

日本語でお願いします。

## よくドキュメントを読んでください
タスク開始前にまず README.md と CHANGELOG.md と docsフォルダのmarkdownを読んでください。


## 進め方
タスクを少しづつお願いするので、
プロジェクトを破壊しない程度に１つ１つ丁寧にエレガントに実装していきましょう。
怪しいときはすぐに止めて僕に聞いて下さい。 (僕はエンジニアです)
意思決定はこまめに確認してね。

## ドキュメント整備
- 変更や新規機能追加時は、必ず **README**, **CHANGELOG**、および `/docs` フォルダ内のドキュメントを更新する。
- 重要な設計変更や意思決定は、**ADR (Architecture Decision Record)** として記録する。

## コーディング規約
- **命名規則**:  
  - 変数名は **camelCase**  
  - 関数名は **snake_case**  
  - クラス名は **PascalCase**
- **インデント**: スペース4個を使用する。
- **関数設計**:  
  - 単一責任原則（Single Responsibility Principle）に基づき、機能ごとに関数を分割する。
  - 冗長なコードは避け、共通処理は関数またはモジュールとして抽出する。

## モジュール化とmainプロセスのシンプル化
- **モジュール化の徹底**:  
  - 主要な機能やビジネスロジックは、個別のモジュールまたはライブラリとして実装する。  
  - 各モジュールは独立してテスト可能な単位とする。
- **mainプロセスの明確化**:  
  - main関数（またはエントリーポイント）には、初期化、モジュールの呼び出し、エラーハンドリングなどの全体の流れのみを記述する。  
  - 複雑なロジックは必ず別モジュールに委譲し、mainはシンプルかつ読みやすい構造に保つ。
- **依存性の明示**:  
  - 各モジュール間の依存関係は明確にし、必要に応じてインターフェースや抽象化レイヤーを設ける。

## テスト規約
- 新機能実装時は必ず **単体テスト** を追加する。
- バグ修正時も、再現テストを作成し回帰防止を徹底する。

## セキュリティルール
- 機密情報を含むファイル（例: **.env**, **config/secrets.\***）は、AIが読み込んだり変更したりしないようにする。
- APIキーや認証情報は、コード内にハードコードせず、環境変数で管理する。
- ログ出力や回答に機密情報が含まれないよう注意する。

## パフォーマンス最適化
- アルゴリズムは、計算量やメモリ使用量を考慮して効率的に設計する。
- フロントエンドの場合は、**コード分割**や**遅延読み込み**（例: `React.lazy()`）を積極的に活用する。
- 必要に応じて、メモ化やキャッシュ戦略を実装する。

## 開発プロセス
- **コミットメッセージ**は、Conventional Commits 形式（例: `feat(module): add new feature`, `fix(module): correct bug`）に従う。
- プルリクエストには、変更内容、影響範囲、動作確認の手順などを明記する。
- リファクタリングや機能改善時は、テストが必ず通ることを確認する。

## ルールの運用と改善
- 本ルールは、定期的にチームレビューを実施し、プロジェクトの進行に合わせて改善・更新する。
- 新たな技術やフレームワークの導入時には、必要なルールを速やかに追加する。
